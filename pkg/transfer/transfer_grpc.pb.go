// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourierClient is the client API for Courier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierClient interface {
	DeliverMail(ctx context.Context, opts ...grpc.CallOption) (Courier_DeliverMailClient, error)
}

type courierClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierClient(cc grpc.ClientConnInterface) CourierClient {
	return &courierClient{cc}
}

func (c *courierClient) DeliverMail(ctx context.Context, opts ...grpc.CallOption) (Courier_DeliverMailClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Courier_serviceDesc.Streams[0], "/Courier/DeliverMail", opts...)
	if err != nil {
		return nil, err
	}
	x := &courierDeliverMailClient{stream}
	return x, nil
}

type Courier_DeliverMailClient interface {
	Send(*Mail) error
	Recv() (*Mail, error)
	grpc.ClientStream
}

type courierDeliverMailClient struct {
	grpc.ClientStream
}

func (x *courierDeliverMailClient) Send(m *Mail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *courierDeliverMailClient) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CourierServer is the server API for Courier service.
// All implementations must embed UnimplementedCourierServer
// for forward compatibility
type CourierServer interface {
	DeliverMail(Courier_DeliverMailServer) error
	mustEmbedUnimplementedCourierServer()
}

// UnimplementedCourierServer must be embedded to have forward compatible implementations.
type UnimplementedCourierServer struct {
}

func (UnimplementedCourierServer) DeliverMail(Courier_DeliverMailServer) error {
	return status.Errorf(codes.Unimplemented, "method DeliverMail not implemented")
}
func (UnimplementedCourierServer) mustEmbedUnimplementedCourierServer() {}

// UnsafeCourierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierServer will
// result in compilation errors.
type UnsafeCourierServer interface {
	mustEmbedUnimplementedCourierServer()
}

func RegisterCourierServer(s grpc.ServiceRegistrar, srv CourierServer) {
	s.RegisterService(&_Courier_serviceDesc, srv)
}

func _Courier_DeliverMail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CourierServer).DeliverMail(&courierDeliverMailServer{stream})
}

type Courier_DeliverMailServer interface {
	Send(*Mail) error
	Recv() (*Mail, error)
	grpc.ServerStream
}

type courierDeliverMailServer struct {
	grpc.ServerStream
}

func (x *courierDeliverMailServer) Send(m *Mail) error {
	return x.ServerStream.SendMsg(m)
}

func (x *courierDeliverMailServer) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Courier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Courier",
	HandlerType: (*CourierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeliverMail",
			Handler:       _Courier_DeliverMail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transfer.proto",
}
